// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: grpc/regression/end.proto

package regression

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EndServiceClient is the client API for EndService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EndServiceClient interface {
	End(ctx context.Context, in *EndRequest, opts ...grpc.CallOption) (*EndResponse, error)
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	GetTC(ctx context.Context, in *GetTCRequest, opts ...grpc.CallOption) (*TestCase, error)
	GetTCS(ctx context.Context, in *GetTCSRequest, opts ...grpc.CallOption) (*GetTCSResponse, error)
	PostTC(ctx context.Context, in *TestCaseReq, opts ...grpc.CallOption) (*PostTCResponse, error)
}

type endServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEndServiceClient(cc grpc.ClientConnInterface) EndServiceClient {
	return &endServiceClient{cc}
}

func (c *endServiceClient) End(ctx context.Context, in *EndRequest, opts ...grpc.CallOption) (*EndResponse, error) {
	out := new(EndResponse)
	err := c.cc.Invoke(ctx, "/end.EndService/End", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endServiceClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, "/end.EndService/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endServiceClient) GetTC(ctx context.Context, in *GetTCRequest, opts ...grpc.CallOption) (*TestCase, error) {
	out := new(TestCase)
	err := c.cc.Invoke(ctx, "/end.EndService/GetTC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endServiceClient) GetTCS(ctx context.Context, in *GetTCSRequest, opts ...grpc.CallOption) (*GetTCSResponse, error) {
	out := new(GetTCSResponse)
	err := c.cc.Invoke(ctx, "/end.EndService/GetTCS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endServiceClient) PostTC(ctx context.Context, in *TestCaseReq, opts ...grpc.CallOption) (*PostTCResponse, error) {
	out := new(PostTCResponse)
	err := c.cc.Invoke(ctx, "/end.EndService/PostTC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EndServiceServer is the server API for EndService service.
// All implementations must embed UnimplementedEndServiceServer
// for forward compatibility
type EndServiceServer interface {
	End(context.Context, *EndRequest) (*EndResponse, error)
	Start(context.Context, *StartRequest) (*StartResponse, error)
	GetTC(context.Context, *GetTCRequest) (*TestCase, error)
	GetTCS(context.Context, *GetTCSRequest) (*GetTCSResponse, error)
	PostTC(context.Context, *TestCaseReq) (*PostTCResponse, error)
	mustEmbedUnimplementedEndServiceServer()
}

// UnimplementedEndServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEndServiceServer struct {
}

func (UnimplementedEndServiceServer) End(context.Context, *EndRequest) (*EndResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method End not implemented")
}
func (UnimplementedEndServiceServer) Start(context.Context, *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedEndServiceServer) GetTC(context.Context, *GetTCRequest) (*TestCase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTC not implemented")
}
func (UnimplementedEndServiceServer) GetTCS(context.Context, *GetTCSRequest) (*GetTCSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTCS not implemented")
}
func (UnimplementedEndServiceServer) PostTC(context.Context, *TestCaseReq) (*PostTCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTC not implemented")
}
func (UnimplementedEndServiceServer) mustEmbedUnimplementedEndServiceServer() {}

// UnsafeEndServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EndServiceServer will
// result in compilation errors.
type UnsafeEndServiceServer interface {
	mustEmbedUnimplementedEndServiceServer()
}

func RegisterEndServiceServer(s grpc.ServiceRegistrar, srv EndServiceServer) {
	s.RegisterService(&EndService_ServiceDesc, srv)
}

func _EndService_End_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndServiceServer).End(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/end.EndService/End",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndServiceServer).End(ctx, req.(*EndRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/end.EndService/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndServiceServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndService_GetTC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndServiceServer).GetTC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/end.EndService/GetTC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndServiceServer).GetTC(ctx, req.(*GetTCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndService_GetTCS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTCSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndServiceServer).GetTCS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/end.EndService/GetTCS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndServiceServer).GetTCS(ctx, req.(*GetTCSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndService_PostTC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestCaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndServiceServer).PostTC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/end.EndService/PostTC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndServiceServer).PostTC(ctx, req.(*TestCaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

// EndService_ServiceDesc is the grpc.ServiceDesc for EndService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EndService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "end.EndService",
	HandlerType: (*EndServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "End",
			Handler:    _EndService_End_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _EndService_Start_Handler,
		},
		{
			MethodName: "GetTC",
			Handler:    _EndService_GetTC_Handler,
		},
		{
			MethodName: "GetTCS",
			Handler:    _EndService_GetTCS_Handler,
		},
		{
			MethodName: "PostTC",
			Handler:    _EndService_PostTC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/regression/end.proto",
}
